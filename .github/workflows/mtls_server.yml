name: mtls server

on:
  push:
    tags:
      - 'v*'
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release_ready: ${{ steps.tag_check.outputs.is_release }}

    steps:
    - uses: actions/checkout@v4

    # 检查是否为发布tag
    - name: Check for release tag
      id: tag_check
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Install VCPKG and dependencies
      id: vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh
        ./vcpkg integrate install
        ./vcpkg install uthash kcp wolfssl

        # Export and extract toolchain path
        EXPORT_OUTPUT=$(./vcpkg export uthash kcp wolfssl --raw --output=temp)
        echo "======EXPORT_OUTPUT=$EXPORT_OUTPUT======"
        TOOLCHAIN_PATH=$(echo "$EXPORT_OUTPUT" | grep -oP 'CMAKE_TOOLCHAIN_FILE=\K[^ ]*')
        echo "VCPKG_CMAKE_TOOLCHAIN=$TOOLCHAIN_PATH" >> $GITHUB_ENV
        
        # Debug output
        echo "Extracted toolchain path: $TOOLCHAIN_PATH"

    - name: Configure with CMake
      run: |
        echo "current pwd: $(pwd)"
        ls -lh
        cd mtls_server
        cmake -S ./ -B ./build -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_CMAKE_TOOLCHAIN }}
        
    - name: Build
      run: |
        cd mtls_server
        cmake --build ./build --config Release
        ls -lh ./build

    - name: Package and export
      run: |
        cd mtls_server
        mkdir -p release/
        cp build/mtls_server release/ 2>/dev/null || :
        cp build/*.so release/ 2>/dev/null || :
        cp build/*.pem release/ 2>/dev/null || :
        cp build/*.der release/ 2>/dev/null || :
        tar czvf mtls-server-release.tar.gz -C release .
        echo "PACKAGE_PATH=$(pwd)/mtls-server-release.tar.gz" >> $GITHUB_ENV

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: mtls-server-release
        path: ${{ env.PACKAGE_PATH }}
  # 发布版本任务
  release:
    needs: build
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: mtls-server-release
          path: release-artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            MTLS Server 版本发布
            - 构建时间: ${{ steps.get-current-date.outputs.date }}
          files: |
            release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get current date
        id: get-current-date
        run: echo "date=$(date)" >> $GITHUB_OUTPUT
