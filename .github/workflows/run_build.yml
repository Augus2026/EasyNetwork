name: run build

on:
  push:
    tags: ['v*']
  workflow_dispatch:

jobs:
  build-mtls-server:
    runs-on: ubuntu-latest

    outputs:
      release_ready: ${{ steps.tag_check.outputs.is_release }}

    steps:
    - uses: actions/checkout@v4

    - name: Install VCPKG and dependencies
      id: vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh
        ./vcpkg integrate install
        ./vcpkg install uthash kcp wolfssl

        # Export and extract toolchain path
        EXPORT_OUTPUT=$(./vcpkg export uthash kcp wolfssl --raw --output=temp)
        echo "======EXPORT_OUTPUT=$EXPORT_OUTPUT======"
        TOOLCHAIN_PATH=$(echo "$EXPORT_OUTPUT" | grep -oP 'CMAKE_TOOLCHAIN_FILE=\K[^ ]*')
        echo "VCPKG_CMAKE_TOOLCHAIN=$TOOLCHAIN_PATH" >> $GITHUB_ENV
        
        # Debug output
        echo "Extracted toolchain path: $TOOLCHAIN_PATH"

    - name: Configure with CMake
      run: |
        echo "current pwd: $(pwd)"
        ls -lh
        cd mtls_server
        cmake -S ./ -B ./build -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_CMAKE_TOOLCHAIN }}

    - name: Build
      run: |
        cd mtls_server
        cmake --build ./build --config Release
        ls -lh ./build

    - name: Package and export
      run: |
        cd mtls_server
        mkdir -p release/
        cp build/mtls_server release/ 2>/dev/null || :
        cp build/*.so release/ 2>/dev/null || :
        cp build/*.pem release/ 2>/dev/null || :
        cp build/*.der release/ 2>/dev/null || :
        tar czvf mtls-server-release.tar.gz -C release .
        echo "PACKAGE_PATH=$(pwd)/mtls-server-release.tar.gz" >> $GITHUB_ENV

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: mtls-server-release
        path: ${{ env.PACKAGE_PATH }}

  build-api-server:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build
      run: |
        cd api_server
        cargo build --release --verbose
        ls -lh ./target/release/
    - name: Run tests

      run: |
        cd api_server
        cargo test --release --verbose

    - name: Package and export
      run: |
        cd api_server
        mkdir -p release/
        cp target/release/api_server release/ 2>/dev/null || :
        tar czvf api-server-release.tar.gz -C release .
        echo "PACKAGE_PATH=$(pwd)/api-server-release.tar.gz" >> $GITHUB_ENV

    - name: Upload release package
      uses: actions/upload-artifact@v4
      with:
        name: api-server-release
        path: ${{ env.PACKAGE_PATH }}

  build-flutter:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'

      - name: Install VCPKG and dependencies
        id: vcpkg
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg integrate install
          .\vcpkg install uthash kcp wolfssl

          $EXPORT_OUTPUT = .\vcpkg export uthash kcp wolfssl --raw --output=temp
          Write-Output "======EXPORT_OUTPUT=$EXPORT_OUTPUT======"
          $TOOLCHAIN_PATH = $EXPORT_OUTPUT | Select-String -Pattern "CMAKE_TOOLCHAIN_FILE=([^\s]+)" | ForEach-Object { $_.Matches.Groups[1].Value }
          Write-Output "Extracted toolchain path: $TOOLCHAIN_PATH"
          echo "VCPKG_CMAKE_TOOLCHAIN=$TOOLCHAIN_PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
  
      - name: Configure with CMake
        run: |
          echo "current pwd: $(pwd)"
          cd EasyNetwork\libEasyNetwork
          cmake -S ./ -B ./build -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_CMAKE_TOOLCHAIN }}
          
      - name: Build
        run: |
          cd EasyNetwork\libEasyNetwork
          cmake --build ./build --config Release

      - name: Install dependencies
        run: |
          cd EasyNetwork\flutter\
          flutter doctor
          flutter pub get
          flutter pub run ffigen --config ffigen.yaml
          
      - name: Build Windows release
        shell: bash
        run: |
          cd EasyNetwork/flutter/
          flutter build windows --release
          ls build/windows/x64/runner/Release/

      - name: Package and export
        shell: bash
        run: |
          cd EasyNetwork/flutter/ || exit 1
          mkdir -p release/ || { echo "Failed to create release/"; exit 1; }
          cp -a build/windows/x64/runner/Release/. release/ || { echo "Failed to copy files"; exit 1; }
          tar czvf flutter-client-release.tar.gz -C release .
          echo "PACKAGE_PATH=$(cygpath -w "$(pwd)/flutter-client-release.tar.gz")" >> $GITHUB_ENV

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: flutter-client-release
          path: ${{ env.PACKAGE_PATH }}

  # 发布版本
  release:
    needs: [build-mtls-server, build-api-server, build-flutter]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    
    steps:
      - name: Download mtls server artifact
        uses: actions/download-artifact@v4
        with:
          name: mtls-server-release
          path: release-artifacts/mtls-server

      - name: Download api server artifact
        uses: actions/download-artifact@v4
        with:
          name: api-server-release
          path: release-artifacts/api-server

      - name: Download flutter client artifact
        uses: actions/download-artifact@v4
        with:
          name: flutter-client-release
          path: release-artifacts/flutter-client
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            EasyNetwork 全组件版本发布
            - 包含: MTLS Server, API Server 和 Flutter Client
            - 构建时间: ${{ steps.get-current-date.outputs.date }}
          files: |
            release-artifacts/mtls-server/*
            release-artifacts/api-server/*
            release-artifacts/flutter-client/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get current date
        id: get-current-date
        run: echo "date=$(date)" >> $GITHUB_OUTPUT
